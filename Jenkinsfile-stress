pipeline {
    agent {
        node {
            label 'ansible'
        }
    }
    parameters {
        choice choices: ['eu-west-2', 'eu-central-1'],
               name: 'mainRegion',
               description: 'region name of main AOB solution'
        choice choices: ['eu-central-1', 'eu-west-2'],
               name: 'secRegion',
               description: 'region name of secondary AOB solution'
        string defaultValue: 'subnet-050842545d0fce2d4',
               name: 'mainSubnet',
               description: 'subnet id at main region',
               trim: true
        string defaultValue: 'subnet-0dbd84f0b33d6ad33',
               name: 'secSubnet',
               description: 'subnet id at secondary region',
               trim: true
        string defaultValue: 'Erez-AOB-def',
               name: 'mainKP',
               description: 'key pair name at main region',
               trim: true
        string defaultValue: 'aob-frank',
               name: 'secKP',
               description: 'key pair name at secondary region',
               trim: true
    }
    environment {
        shortCommit = sh(script: "git log -n 1 --pretty=format:'%h'", returnStdout: true).trim()
    }
    stages {
        stage('Install virtual environment') {
            steps {
                sh '''
                python3 -m pip install --user virtualenv
                python3 -m virtualenv .testenv
                source ./.testenv/bin/activate
                
                wget https://releases.hashicorp.com/terraform/0.12.26/terraform_0.12.26_linux_amd64.zip
                unzip terraform_0.12.26_linux_amd64.zip 
                mv terraform /usr/bin/
                '''
            }
        }
        stage('AOB stress test') {
          steps {
            sh '''
                source ./.testenv/bin/activate
                cd src/tests/stress
                success=true
                BTF=$(python3 dynamo_on_boarded.py)
                echo "[INFO] There are" $BTF "successful records in dynamo table"
                terraform init
                terraform apply -auto-approve \ 
                                -var="region_main=${params.mainRegion}" -var="region_sec=${params.secRegion}" \
                                -var="subnet_id_main=${params.mainSubnet}" -var="subnet_id_sec=${params.secSubnet}" \
                                -var="key_pair_main=${params.mainKP}" -var="key_pair_sec=${params.secKP}"
                echo "[INFO] Finish deploy terraform"
                ATF=$(terraform state list | grep aws_instance | wc -l)
                echo "[INFO] terraform deployed" $ATF "instances"
                DS=$(($BTF + $ATF))
                CS=$(python3 dynamo_on_boarded.py)
                echo "[INFO] Check if AOB succeed to on board all" $ATF "instances"
                i=0
                while [ $DS -gt $CS ]
                do
                	echo "[INFO] There are" $CS "of" $DS "successful records"
                	i=$((i+1))
                	if [ $i -eq 5 ]; then
                		echo "[ERR] failed to on board all the instances"
                		success=false
                		break
                	fi
                	sleep 10
                	CS=$(python3 dynamo_on_boarded.py)
                done
                terraform destroy -auto-approve
                CS=$(python3 dynamo_on_boarded.py)
                i=0
                while [ $CS -gt $BTF ]
                do
                	echo "[INFO] there are" $CS "of" $BTF "successful records"
                	if [ $i -eq 5 ]; then
                		echo "[ERR] AOB failed to delete all the instances"
                		success=false
                		break
                	fi
                	sleep 10
                	CS=$(python3 dynamo_on_boarded.py)
                done
                if [ $success != true ]; then
                	echo "[ERR] AOB stress test failed check for errors"
                	exit 1
                fi
                echo "[INFO] AOB stress test succeed"
            '''
          }
        }
    }
}
