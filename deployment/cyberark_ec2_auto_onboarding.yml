---

- hosts: localhost
  gather_facts: no
  vars_prompt:

    - name: vault_user
      prompt: "Please enter the Vault administrator username"
      default: "Administrator"
      private: no

    - name: vault_password
      prompt: "Please enter the Vault Administrator password"
      private: yes

  tasks:
    - name: Include AOB Variables
      include_vars:
        file: vars/AOB-Params.yml
        name: aob_vars

    - name: Stack Name
      set_fact:
        CFStackName: "AOB-CF"
        SSStackName: "AOB-SS"

    - name: Deploy solution blcok
      block:

        - name: Create Elasticity Lambda Security Group
          ec2_group:
            name: "ElasticityLambdaSecurityGroup"
            description: "Security group for elasticity lambda"
            vpc_id: "{{ aob_vars.CloudFormation_parameters.ComponentsVPC }}"
            region: "{{ aob_vars.Runtime_parameters.MainRegion }}"
            rules_egress:
              - proto: "tcp"
                from_port: "443"
                to_port: "443"
                cidr_ip: "0.0.0.0/0"
                group_name: "ElasticityLambdaSecurityGroup"
            tags:
              Name: "CyberArk AOB - Elasticity Lambda Security Group"
          register: elasticity_sg


        - name: Create Trust Lambda Security Group
          ec2_group:
            name: "TrustMechanismSecurityGroup"
            description: "Security group for TrustMechanism lambda"
            vpc_id: "{{ aob_vars.CloudFormation_parameters.ComponentsVPC }}"
            region: "{{ aob_vars.Runtime_parameters.MainRegion }}"
            tags:
              Name: "CyberArk AOB - Trust Lambda Security Group"
          register: trust_sg

        - name: Set Security Group parameters
          set_fact:
            sg_info:
              ElasticitySG: "{{ elasticity_sg.group_id }}"
              TrustSG: "{{ trust_sg.group_id }}"

        - name: Set Vault parameters
          set_fact:
            vault_info:
              VaultUser: "{{ vault_user }}"
              VaultPassword: "{{ vault_password }}"

        - name: Combine parameters
          set_fact:
            cf_parameters: "{{ aob_vars.CloudFormation_parameters|combine(vault_info) }}"

        - name: Combine parameters
          set_fact:
            cf_parameters_final: "{{ cf_parameters|combine(sg_info) }}"

        - name: Deploy AOB CloudFormation
          include_role:
            name: cf_deploy
          vars:
            cf_template_file: "{{ aob_vars.CFTemplatePath }}"
            cf_template_parameters: "{{ cf_parameters_final }}"
            runtime_parameters: "{{ aob_vars.Runtime_parameters }}"
          register: aob_cf

        - debug:
            msg: "{{ cf_output }}"

        - name: Deploy AOB StackSet
          include_role:
            name: ss_deploy
          vars:
            ss_template_file: "{{ aob_vars.SSTemplatePath }}"
            ss_template_parameters:
              LambdaARN: "{{ cf_output.ElasticityLambda }}"
            runtime_parameters: "{{ aob_vars.Runtime_parameters }}"
          register: aob_ss

      rescue:

        # get pvwa sg id
        - name: Revoke rule from PVWA SG
          shell: |
            aws ec2 revoke-security-group-ingress --group-id {{ aob_vars.CloudFormation_parameters.PVWASG }} --protocol tcp --port 443 --source-group {{ elasticity_sg.group_id }} --region {{ aob_vars.Runtime_parameters.MainRegion }}
          ignore_errors: True

        - name: Get Default SG id of same VPC of Elasticity SG and Trust SG
          ec2_group_facts:
            region: "{{ aob_vars.Runtime_parameters.MainRegion }}"
            filters:
              group_name: "default"
              vpc-id: "{{ aob_vars.CloudFormation_parameters.ComponentsVPC }}"
          register: default_sg

        # get netwrok interface id of Elasticity SG
        - name: Get Network Interface ID for Elasticity SG
          ec2_eni_facts:
            region: "{{ aob_vars.Runtime_parameters.MainRegion }}"
            filters:
              group-id: "{{ elasticity_sg.group_id }}"
          register: elasticity_eni


        # get netwrok interface id of Trust SG
        - name: Get Network Interface ID for Trust SG
          ec2_eni_facts:
            region: "{{ aob_vars.Runtime_parameters.MainRegion }}"
            filters:
              group-id: "{{ trust_sg.group_id }}"
          register: trust_eni

        # modify to defualt sg for both trust and elasticity
        - name: Modify Network Interfaces - Detach and Attach to Default SG
          shell: |
            aws ec2 modify-network-interface-attribute --network-interface-id {{ elasticity_eni.network_interfaces[0].id }} --groups {{ default_sg.security_groups[0].group_id }} --region {{ aob_vars.Runtime_parameters.MainRegion }}
          when: "{{elasticity_eni.network_interfaces}}|length > 0"

        - name: Modify Network Interfaces - Detach and Attach to Default SG
          shell: |
            aws ec2 modify-network-interface-attribute --network-interface-id {{ elasticity_eni.network_interfaces[1].id }} --groups {{ default_sg.security_groups[0].group_id }} --region {{ aob_vars.Runtime_parameters.MainRegion }}
          when: "{{elasticity_eni.network_interfaces}}|length > 1"

        - name: Modify Network Interfaces - Detach and Attach to Default SG
          shell: |
            aws ec2 modify-network-interface-attribute --network-interface-id {{ trust_eni.network_interfaces[0].id }} --groups {{ default_sg.security_groups[0].group_id }} --region {{ aob_vars.Runtime_parameters.MainRegion }}
          when: "{{ trust_eni.network_interfaces }}|length > 0"

        # remove security groups
        - name: Remove Elasticity SG
          ec2_group:
            group_id: "{{elasticity_sg.group_id}}"
            vpc_id: "{{ aob_vars.CloudFormation_parameters.ComponentsVPC }}"
            region: "{{ aob_vars.Runtime_parameters.MainRegion }}"
            state: "absent"
          when: elasticity_sg is defined


        - name: Remove Trust SG
          ec2_group:
            group_id: "{{trust_sg.group_id}}"
            vpc_id: "{{ aob_vars.CloudFormation_parameters.ComponentsVPC }}"
            region: "{{ aob_vars.Runtime_parameters.MainRegion }}"
            state: "absent"
          when: trust_sg is defined

        - name: Rollback AOB StackSet
          cloudformation_stack_set:
            name: "{{ SSStackName }}"
            state: "absent"
            region: "{{ aob_vars.Runtime_parameters.MainRegion }}"
            accounts: "{{ aob_vars.Runtime_parameters.Accounts }}"
            regions: "{{ aob_vars.Runtime_parameters.Regions }}"
          when: aob_ss is defined
          ignore_errors: True

        - name: Rollback AOB CloudFormation
          cloudformation:
            stack_name: "{{ CFStackName }}"
            region: "{{ aob_vars.Runtime_parameters.MainRegion }}"
            state: "absent"
          when:
            - aob_cf is defined

